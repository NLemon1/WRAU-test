{
  "x-generator": "NSwag v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "WRA Umbraco API",
    "description": "WRA Umbraco Service API",
    "contact": {
      "name": "Eric Solari",
      "url": "https://www.wra.org",
      "email": "eric@wra.org"
    },
    "license": {
      "name": "MIT License",
      "url": "https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://app2.wra.org/umbraco"
    }
  ],
  "paths": {
    "/api/v1/webhook/{eventType}": {
      "post": {
        "tags": [
          "WebHook"
        ],
        "operationId": "WebHook_ReceiveEvent",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "payload",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          }
        ]
      }
    },
    "/api/v1/webhook/subscribe": {
      "post": {
        "tags": [
          "WebHook"
        ],
        "operationId": "WebHook_SubscribeToEvent",
        "requestBody": {
          "x-name": "subscriptionModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          }
        ]
      }
    },
    "/api/v1/permission/{userId}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Invalidate the permission cache for a user.",
        "operationId": "Permission_InvalidatePermissionCacheForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Request an access token using credentials.",
        "operationId": "Tokens_GetToken",
        "parameters": [
          {
            "name": "tenant",
            "in": "header",
            "required": true,
            "description": "Input your tenant Id to access this API",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          }
        ]
      }
    },
    "/api/tokens/refresh": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Request an access token using a refresh token.",
        "operationId": "Tokens_Refresh",
        "parameters": [
          {
            "name": "tenant",
            "in": "header",
            "required": true,
            "description": "Input your tenant Id to access this API",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          }
        ]
      }
    },
    "/api/v1/agenteventregistration/registrations/event": {
      "post": {
        "tags": [
          "AgentEventRegistration"
        ],
        "summary": "Get a list of agent event registrations by meeting code.",
        "description": "Sample request:\n\n    POST /agenteventregistration/registrations/event\n    {\n        \"memberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"meetingCode\": \"CE2324\"\n    }",
        "operationId": "AgentEventRegistration_GetAgentEventRegistrationListByEvent",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the admin and a meeting code.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAgentEventRegistrationsByEventRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of agent event registration records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentEventRegistrationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/agenteventregistration/registrations/agent": {
      "post": {
        "tags": [
          "AgentEventRegistration"
        ],
        "summary": "Get a list of event registrations for an individual.",
        "description": "Sample request:\n\n    POST /agenteventregistration/registrations/agent\n    {\n        \"memberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"agentMemberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"meetingTypes\": \"CONV DR DW RGD FAIR\",\n        \"months\": 15\n    }",
        "operationId": "AgentEventRegistration_GetAgentEventRegistrationsListByIndividual",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the admin and the memberId of the agent, optional meetingTypes, and months lookback.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAgentEventRegistrationsByIndividualRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of agent event registrations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentEventRegistrationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/agenteventregistration/events": {
      "post": {
        "tags": [
          "AgentEventRegistration"
        ],
        "summary": "Get a list of events.",
        "description": "Sample request:\n\n    POST /agenteventregistration/events\n    {\n        \"meetingTypes\": \"CONV DR DW RGD FAIR\",\n        \"months\": 15\n    }",
        "operationId": "AgentEventRegistration_GetAgentEventRegistrationsEventList",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing optional meeting types and months.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAgentEventRegistrationsEventListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of events filtered by number of months to look back and the meeting types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentMeetingEventDetailDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/agenteventregistration/agents": {
      "post": {
        "tags": [
          "AgentEventRegistration"
        ],
        "summary": "Get a list of agents.",
        "description": "Sample request:\n\n    POST /agenteventregistration/agents\n    {\n        \"memberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\"\n    }",
        "operationId": "AgentEventRegistration_GetAgentEventRegistrationsIndividualList",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the administrator.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAgentEventRegistrationsIndividualListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of events filtered by number of months to look back and the meeting types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentEventRegistrationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/calendar/officeclosures": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Get a list of office closures from the common calendar.",
        "description": "Retrieve office closure dates.",
        "operationId": "Calendar_GetOfficeClosureList",
        "responses": {
          "200": {
            "description": "A list of OfficeClosureDto.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeClosureDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/certificateprogram/search": {
      "post": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Search certificate programs using available filters.",
        "operationId": "CertificateProgram_SearchCertificatePrograms",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCertificateProgramsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfCertificateProgramDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/certificateprogram": {
      "get": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Get a list of all certificate programs.",
        "operationId": "CertificateProgram_GetCertificateProgramList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificateProgramDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Create a new certificate program.",
        "operationId": "CertificateProgram_CreateCertificateProgram",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificateProgramRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Update a certificate program.",
        "operationId": "CertificateProgram_UpdateCertificateProgram",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCertificateProgramRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/certificateprogram/{id}": {
      "get": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Get a certificate program.",
        "operationId": "CertificateProgram_GetCertificateProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateProgramDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Delete a certificate program by Id.",
        "operationId": "CertificateProgram_DeleteCertificateProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/certificateprogram/export": {
      "post": {
        "tags": [
          "CertificateProgram"
        ],
        "summary": "Export certificate programs to csv.",
        "operationId": "CertificateProgram_ExportCertificatePrograms",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportCertificateProgramsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/committee/search": {
      "post": {
        "tags": [
          "Committee"
        ],
        "summary": "Search committees using available filters.",
        "operationId": "Committee_SearchCommittees",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCommitteesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfCommitteeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/committee": {
      "get": {
        "tags": [
          "Committee"
        ],
        "summary": "Get a list of all committees.",
        "operationId": "Committee_GetCommitteeList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitteeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Committee"
        ],
        "summary": "Create a new committee.",
        "operationId": "Committee_CreateCommittee",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommitteeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/committee/{id}": {
      "get": {
        "tags": [
          "Committee"
        ],
        "summary": "Get a committee.",
        "operationId": "Committee_GetCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitteeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Committee"
        ],
        "summary": "Update a committee.",
        "operationId": "Committee_UpdateCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommitteeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Committee"
        ],
        "summary": "Delete a committee.",
        "operationId": "Committee_DeleteCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/committee/member/{memberId}": {
      "get": {
        "tags": [
          "Committee"
        ],
        "summary": "Get a committee by member Id.",
        "operationId": "Committee_GetCommitteeByMemberId",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitteeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/committee/export": {
      "post": {
        "tags": [
          "Committee"
        ],
        "summary": "Export committees.",
        "operationId": "Committee_ExportCommittees",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportCommitteesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/search": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Search companies using available filters.",
        "description": "Retrieve a list of companies using filters.",
        "operationId": "Company_SearchCompanies",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCompaniesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfCompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a list of all companies.",
        "operationId": "Company_GetCompanyList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a new company.",
        "operationId": "Company_CreateCompany",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a company.",
        "operationId": "Company_GetCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update a company.",
        "operationId": "Company_UpdateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Delete a company.",
        "operationId": "Company_DeleteCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/export": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Export companies.",
        "operationId": "Company_ExportCompanies",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportCompaniesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/creates": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a list of company records staged for creation.",
        "operationId": "Company_GetStagedCompanyCreates",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/updates": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a list of company records staged for updates.",
        "operationId": "Company_GetStagedCompanyUpdates",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/deletes": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a list of company records staged for deletion.",
        "operationId": "Company_GetStagedCompanyDeletes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/changes": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a list of company changes (creates, updates and deletes).",
        "operationId": "Company_GetStagedCompanyChanges",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StagedEntityChangesOfCompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Trigger a sync of all staged companies.",
        "operationId": "Company_SyncStagedCompanies",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCompanyStagedChangesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Trigger a sync of a single staged company by Company Id.",
        "operationId": "Company_SyncStagedCompanyByCompanyId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync/{imisId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Trigger a sync of a single staged company by iMIS Id.",
        "operationId": "Company_SyncStagedCompanyByImisId",
        "parameters": [
          {
            "name": "imisId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync/reset": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Reset the most recent sync of staged companies.",
        "operationId": "Company_ResetSyncStagedCompanyChanges",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync/reset/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Reset the most recent sync of staged company by company Id.",
        "operationId": "Company_ResetSyncStagedCompanyChangesByCompanyId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/company/staging/sync/reset/{imisId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Reset the most recent sync of a staged company by iMIS Id.",
        "operationId": "Company_ResetSyncStagedCompanyChangesByiMISId",
        "parameters": [
          {
            "name": "imisId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companyeducationhistory/company": {
      "post": {
        "tags": [
          "CompanyEducationHistory"
        ],
        "summary": "Get a list of company member education history records.",
        "description": "Sample request:\n\n    POST /companyeducationhistory/company\n    {\n        \"memberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"programCode\": \"CE2324\"\n    }",
        "operationId": "CompanyEducationHistory_GetCompanyEducationHistoryList",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the company admin and an optional program code.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCompanyEducationHistoryListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of company education history records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyEducationHistoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companyeducationhistory/member": {
      "post": {
        "tags": [
          "CompanyEducationHistory"
        ],
        "summary": "Get a list of company education history records.",
        "description": "Sample request:\n\n    POST /companyeducationhistory/member\n    {\n        \"memberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"agentMemberId\": \"96734B4C-F4D4-4D66-AC2C-AF5A643F7456\",\n        \"programCode\": \"CE2324\"\n    }",
        "operationId": "CompanyEducationHistory_GetCompanyMemberEducationHistoryList",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the company admin, the agent memberId and optional program code.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCompanyMemberEducationHistoryListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of company member education history records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyMemberEducationHistoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companysubscription/search": {
      "post": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Search company subscriptions using available filters.",
        "operationId": "CompanySubscription_SearchCompanySubscriptions",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCompanySubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfCompanySubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companysubscription": {
      "get": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Get a list of all company subscriptions.",
        "operationId": "CompanySubscription_GetCompanySubscriptionList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanySubscriptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Create a new company subscription.",
        "operationId": "CompanySubscription_CreateCompanySubscription",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanySubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companysubscription/{id}": {
      "get": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Get a company subscription.",
        "operationId": "CompanySubscription_GetCompanySubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Update a company subscription.",
        "operationId": "CompanySubscription_UpdateCompanySubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanySubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Delete a company subscription.",
        "operationId": "CompanySubscription_DeleteCompanySubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/companysubscription/export": {
      "post": {
        "tags": [
          "CompanySubscription"
        ],
        "summary": "Export company subscriptions.",
        "operationId": "CompanySubscription_ExportCompanySubscriptions",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportCompanySubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/designation/search": {
      "post": {
        "tags": [
          "Designation"
        ],
        "summary": "Search Designations using available filters.",
        "description": "Retrieve a list of Designations using filters.",
        "operationId": "Designation_SearchDesignations",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDesignationsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfDesignationDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/designation": {
      "get": {
        "tags": [
          "Designation"
        ],
        "summary": "Get a list of all Designations.",
        "operationId": "Designation_GetDesignationList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DesignationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Designation"
        ],
        "summary": "Create a new Designation.",
        "operationId": "Designation_CreateDesignation",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDesignationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/designation/{id}": {
      "get": {
        "tags": [
          "Designation"
        ],
        "summary": "Get a Designation.",
        "operationId": "Designation_GetDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DesignationDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Designation"
        ],
        "summary": "Update a Designation.",
        "operationId": "Designation_UpdateDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDesignationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Designation"
        ],
        "summary": "Delete a Designation.",
        "operationId": "Designation_DeleteDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/designation/export": {
      "post": {
        "tags": [
          "Designation"
        ],
        "summary": "Export Designations.",
        "operationId": "Designation_ExportDesignations",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportDesignationsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/discount/search": {
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Search discounts using available filters.",
        "operationId": "Discount_SearchDiscounts",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDiscountsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfDiscountDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/discount": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Get a list of all discounts.",
        "operationId": "Discount_GetDiscountList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Create a new discount.",
        "operationId": "Discount_CreateDiscount",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscountRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/discount/{id}": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Get a discount.",
        "operationId": "Discount_GetDiscount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Discount"
        ],
        "summary": "Update a discount.",
        "operationId": "Discount_UpdateDiscount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDiscountRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Discount"
        ],
        "summary": "Delete a discount.",
        "operationId": "Discount_DeleteDiscount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/discount/export": {
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Export discounts.",
        "operationId": "Discount_ExportDiscounts",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportDiscountsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/fundraisingreports/fundraising/{memberId}": {
      "get": {
        "tags": [
          "FundraisingReports"
        ],
        "summary": "Get a list of fundraising reports available to the member.",
        "description": "Sample request:\n            \n    CF68806A-17EE-4B25-B737-196BF0C177E5",
        "operationId": "FundraisingReports_GetFundraisingReportList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The ID of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of fundraising reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundraisingReportDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/fundraisingreports/report": {
      "post": {
        "tags": [
          "FundraisingReports"
        ],
        "summary": "Get a specific fundraising report for a member by reportId and fileType.",
        "description": "Valid Mime Types: (pdf,csv,excelopenxml,txt)\n            \n    {\n        \"memberId\": \"CF68806A-17EE-4B25-B737-196BF0C177E5\",\n        \"reportId\": 9,\n        \"useMemberChapter\": true,\n        \"mimeType\": \"pdf\",\n        \"reportParameters\": {\n            \"BeginDate\": \"2024-01-01\",\n            \"EndDate\": \"2024-05-30\"\n        }\n    }",
        "operationId": "FundraisingReports_GetFundraisingReport",
        "requestBody": {
          "x-name": "request",
          "description": "The report request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFundraisingReportRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the fundraising report.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "If no report is found for the given parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error."
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/housingstatistics": {
      "get": {
        "tags": [
          "HousingStatistics"
        ],
        "summary": "Get the housing statistics report data.",
        "operationId": "HousingStatistics_GetHousingStatisticList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HousingStatisticDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/legalhotlinecall": {
      "post": {
        "tags": [
          "LegalHotlineCall"
        ],
        "summary": "Create a legal hotline call.",
        "operationId": "LegalHotlineCall_CreateLegalHotlineCall",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLegalHotlineCallRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/localboard/search": {
      "post": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Search local boards using available filters.",
        "operationId": "LocalBoard_SearchLocalBoards",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchLocalBoardsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfLocalBoardDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/localboard": {
      "get": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Get a list of all local boards.",
        "operationId": "LocalBoard_GetLocalBoardList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalBoardDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Create a new local board.",
        "operationId": "LocalBoard_CreateLocalBoard",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocalBoardRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/localboard/{id}": {
      "get": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Get a local board.",
        "operationId": "LocalBoard_GetLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalBoardDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Update a local board.",
        "operationId": "LocalBoard_UpdateLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocalBoardRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Delete a local board.",
        "operationId": "LocalBoard_DeleteLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/localboard/export": {
      "post": {
        "tags": [
          "LocalBoard"
        ],
        "summary": "Export local boards.",
        "operationId": "LocalBoard_ExportLocalBoards",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportLocalBoardsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercommittee/search": {
      "post": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Search member committees using available filters.",
        "operationId": "MemberCommittee_SearchMemberCommittees",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberCommitteesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberCommitteeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercommittee": {
      "get": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Get a list of all member committees.",
        "operationId": "MemberCommittee_GetMemberCommitteeList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberCommitteeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Create a new member committee.",
        "operationId": "MemberCommittee_CreateMemberCommittee",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberCommitteeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercommittee/member/{memberId}": {
      "get": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Get a member committee.",
        "operationId": "MemberCommittee_GetMemberCommitteeListByMemberId",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberCommitteeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercommittee/{id}": {
      "get": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Get a member committee.",
        "operationId": "MemberCommittee_GetMemberCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberCommitteeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Update a member committee.",
        "operationId": "MemberCommittee_UpdateMemberCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberCommitteeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Delete a member committee.",
        "operationId": "MemberCommittee_DeleteMemberCommittee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercommittee/export": {
      "post": {
        "tags": [
          "MemberCommittee"
        ],
        "summary": "Export member committees.",
        "operationId": "MemberCommittee_ExportMemberCommittees",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberCommitteesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercomponentprogress/{id}": {
      "get": {
        "tags": [
          "MemberComponentProgress"
        ],
        "summary": "Get a list of CE component progress records for the current biennium a given member Id.",
        "operationId": "MemberComponentProgress_GetMemberComponentProgressList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberComponentProgressDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/search": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Search members using available filters.",
        "description": "Sample request:\n            \n    POST /member/search\n    {\n        \"advancedSearch\": {\n            \"fields\": [\"Address1\"],\n            \"keyword\": \"1158\"\n        },\n        \"advancedFilter\": {\n            \"logic\": \"and\",\n            \"filters\": [\n                {\n                    \"field\": \"MemberTypeId\",\n                    \"operator\": \"eq\",\n                    \"value\": \"8655DD5E-5703-4BDA-1940-08DBFA99C6BB\"\n                }\n            ]\n        }\n    }",
        "operationId": "Member_SearchMembers",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMembersRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns paginated response of Member DTOs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a list of all members.",
        "operationId": "Member_GetMemberList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Create a new member.",
        "operationId": "Member_CreateMember",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update a member.",
        "operationId": "Member_UpdateMemberWithoutRequestParam",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/details": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a list of all members with details.",
        "operationId": "Member_GetMemberListWithDetails",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberWithDetailsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/details/{id}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a members with details.",
        "operationId": "Member_GetMemberWithDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberWithDetailsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/{id}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a member.",
        "operationId": "Member_GetMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update a member.",
        "operationId": "Member_UpdateMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Delete a member.",
        "operationId": "Member_DeleteMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/export": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Export members.",
        "operationId": "Member_ExportMembers",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMembersRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/member/staging/sync": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Trigger a sync of staged members.",
        "operationId": "Member_SyncStagedMembers",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncMemberStagedChangesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercoursecertificate/{memberId}": {
      "get": {
        "tags": [
          "MemberCourseCertificate"
        ],
        "summary": "Get a list of course certificates for a given member Id.",
        "operationId": "MemberCourseCertificate_GetMemberCourseCertificateList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of MemberCourseCertificateDto instances.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberCourseCertificateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membercourseprogress/{memberId}": {
      "get": {
        "tags": [
          "MemberCourseProgress"
        ],
        "summary": "Get a list of course progress records for a given member Id. You can specify the 'Cache-Control: no-cache' header to bypass cache.",
        "description": "Header: Cache-Control: no-cache or empty\n\n    \n    \n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "MemberCourseProgress_GetMemberCourseProgressList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "Cache-Control",
            "x-originalName": "noCache",
            "in": "header",
            "description": "A flag to bypass cache if 'no-cache' is set.",
            "schema": {
              "type": "string",
              "default": ""
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of course progress records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberCourseProgressDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdesignation/search": {
      "post": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Search member designations using available filters.",
        "operationId": "MemberDesignation_SearchMemberDesignations",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberDesignationsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberDesignationDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdesignation": {
      "get": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Get a list of all member designations.",
        "operationId": "MemberDesignation_GetMemberDesignationList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDesignationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Create a new member designation.",
        "operationId": "MemberDesignation_CreateMemberDesignation",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberDesignationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdesignation/member/{memberId}": {
      "get": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Get a member designation.",
        "operationId": "MemberDesignation_GetMemberDesignationListByMemberId",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDesignationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdesignation/{id}": {
      "get": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Get a member designation.",
        "operationId": "MemberDesignation_GetMemberDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDesignationDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Update a member designation.",
        "operationId": "MemberDesignation_UpdateMemberDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberDesignationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Delete a member designation.",
        "operationId": "MemberDesignation_DeleteMemberDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdesignation/export": {
      "post": {
        "tags": [
          "MemberDesignation"
        ],
        "summary": "Export member designations.",
        "operationId": "MemberDesignation_ExportMemberDesignations",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberDesignationsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdonation/{id}": {
      "get": {
        "tags": [
          "MemberDonation"
        ],
        "summary": "Retrieve member dues for a specific member.",
        "operationId": "MemberDonation_GetMemberDonationContributions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDonationContributionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdues/invoices/{memberId}": {
      "get": {
        "tags": [
          "MemberDues"
        ],
        "summary": "Retrieve a list of member dues invoices for a specific member.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "MemberDues_GetMemberDuesInvoice",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of member dues invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDuesInvoiceDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdues/payment-strategy/{memberId}": {
      "get": {
        "tags": [
          "MemberDues"
        ],
        "summary": "Retrieve payment strategy for a specific member.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "MemberDues_GetMemberDuesPaymentStrategy",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the member dues payment strategy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDuesPaymentStrategyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberdues/history/{memberId}": {
      "get": {
        "tags": [
          "MemberDues"
        ],
        "summary": "Retrieve payment history for a specific member.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "MemberDues_GetMemberDuesPaymentHistory",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the member dues payment history.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDuesPaymentHistoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberethicstraining/company/{memberId}": {
      "get": {
        "tags": [
          "MemberEthicsTraining"
        ],
        "summary": "Retrieve member ethics training for a company by the administrators memberId.",
        "description": "Sample request:\n            \n    Guid: 96734B4C-F4D4-4D66-AC2C-AF5A643F7456",
        "operationId": "MemberEthicsTraining_GetCompanyMemberEthicsTrainingStatusesList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The ID of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of company member ethics statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyMemberEthicsTrainingStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberlocalboard/search": {
      "post": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Search member local boards using available filters.",
        "operationId": "MemberLocalBoard_SearchMemberLocalBoards",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberLocalBoardsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberLocalBoardDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberlocalboard": {
      "get": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Get a list of all member local boards.",
        "operationId": "MemberLocalBoard_GetMemberLocalBoardList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberLocalBoardDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Create a new member local board.",
        "operationId": "MemberLocalBoard_CreateMemberLocalBoard",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberLocalBoardRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberlocalboard/{id}": {
      "get": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Get a member local board.",
        "operationId": "MemberLocalBoard_GetMemberLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberLocalBoardDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Update a member local board.",
        "operationId": "MemberLocalBoard_UpdateMemberLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberLocalBoardRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Delete a member local board.",
        "operationId": "MemberLocalBoard_DeleteMemberLocalBoard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberlocalboard/export": {
      "post": {
        "tags": [
          "MemberLocalBoard"
        ],
        "summary": "Export member local boards.",
        "operationId": "MemberLocalBoard_ExportMemberLocalBoards",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberLocalBoardsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membermarketingsubscription/{memberId}": {
      "get": {
        "tags": [
          "MemberMarketingSubscription"
        ],
        "summary": "Retrieve member communication subscription preferences for a specific member.",
        "operationId": "MemberMarketingSubscription_GetMemberMarketingSubscriptionList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "Bridge Unique Member Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberMarketingSubscriptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membermarketingsubscription": {
      "post": {
        "tags": [
          "MemberMarketingSubscription"
        ],
        "summary": "Update a member marketing subscription.",
        "description": "Updates the status of a member marketing subscription.",
        "operationId": "MemberMarketingSubscription_UpdateMemberMarketingSubscription",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberMarketingSubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberMarketingSubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/memberorderhistory/{id}": {
      "get": {
        "tags": [
          "MemberOrderHistory"
        ],
        "summary": "Get a list of historical orders from given a member Id.",
        "operationId": "MemberOrderHistory_GetMemberOrderHistoryList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberOrderHistoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membersubscription/search": {
      "post": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Search member subscriptions using available filters.",
        "operationId": "MemberSubscription_SearchMemberSubscriptions",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberSubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberSubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membersubscription": {
      "get": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Get a list of all member subscriptions.",
        "operationId": "MemberSubscription_GetAllMemberSubscriptionList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberSubscriptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Create a new member subscription.",
        "operationId": "MemberSubscription_CreateMemberSubscription",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberSubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membersubscription/member/{memberId}": {
      "get": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Get a list of member subscriptions for a given member.",
        "operationId": "MemberSubscription_GetMemberSubscriptionList",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberSubscriptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membersubscription/{id}": {
      "get": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Get a member subscription.",
        "operationId": "MemberSubscription_GetMemberSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberSubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Update a member subscription.",
        "operationId": "MemberSubscription_UpdateMemberSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberSubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Delete a member subscription.",
        "operationId": "MemberSubscription_DeleteMemberSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membersubscription/export": {
      "post": {
        "tags": [
          "MemberSubscription"
        ],
        "summary": "Export member subscriptions.",
        "operationId": "MemberSubscription_ExportMemberSubscriptions",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberSubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertype/search": {
      "post": {
        "tags": [
          "MemberType"
        ],
        "summary": "Search member types using available filters.",
        "operationId": "MemberType_SearchMemberTypes",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberTypesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertype": {
      "get": {
        "tags": [
          "MemberType"
        ],
        "summary": "Get a list of all member types.",
        "operationId": "MemberType_GetMemberTypeList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberType"
        ],
        "summary": "Create a new member type.",
        "operationId": "MemberType_CreateMemberType",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertype/{id}": {
      "get": {
        "tags": [
          "MemberType"
        ],
        "summary": "Get a member type.",
        "operationId": "MemberType_GetMemberType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberType"
        ],
        "summary": "Update a member type.",
        "operationId": "MemberType_UpdateMemberType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberType"
        ],
        "summary": "Delete a member type.",
        "operationId": "MemberType_DeleteMemberType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertype/export": {
      "post": {
        "tags": [
          "MemberType"
        ],
        "summary": "Export member types.",
        "operationId": "MemberType_ExportMemberTypes",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberTypesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertypemapping/search": {
      "post": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Search member type mappings using available filters.",
        "operationId": "MemberTypeMapping_SearchMemberTypeMappings",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemberTypeMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfMemberTypeMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertypemapping": {
      "get": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Get a list of all member type mappings.",
        "operationId": "MemberTypeMapping_GetMemberTypeMappingList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberTypeMappingDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Create a new member type mapping.",
        "operationId": "MemberTypeMapping_CreateMemberTypeMapping",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberTypeMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertypemapping/{id}": {
      "get": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Get a member type mapping.",
        "operationId": "MemberTypeMapping_GetMemberTypeMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberTypeMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Update a member type mapping.",
        "operationId": "MemberTypeMapping_UpdateMemberTypeMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberTypeMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Delete a member type mapping.",
        "operationId": "MemberTypeMapping_DeleteMemberTypeMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/membertypemapping/export": {
      "post": {
        "tags": [
          "MemberTypeMapping"
        ],
        "summary": "Export member types mappings.",
        "operationId": "MemberTypeMapping_ExportMemberTypeMappings",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportMemberTypeMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productcategory/search": {
      "post": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Search product categories using available filters.",
        "operationId": "ProductCategory_SearchProductCategories",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductCategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productcategory": {
      "get": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Get a list of all product categories.",
        "operationId": "ProductCategory_GetProductCategoryList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductCategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Create a new product category.",
        "operationId": "ProductCategory_CreateProductCategory",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productcategory/{id}": {
      "get": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Get a product category.",
        "operationId": "ProductCategory_GetProductCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Update a product category.",
        "operationId": "ProductCategory_UpdateProductCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Delete a product category.",
        "operationId": "ProductCategory_DeleteProductCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productcategory/dapper/{id}": {
      "get": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Get product categories via dapper.",
        "operationId": "ProductCategory_GetProductCategoriesWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productcategory/export": {
      "post": {
        "tags": [
          "ProductCategory"
        ],
        "summary": "Export product categories.",
        "operationId": "ProductCategory_ExportProductCategories",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductCategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product/search": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Search products using available filters.",
        "operationId": "Product_SearchProducts",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a list of all products.",
        "operationId": "Product_GetProductList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new product.",
        "operationId": "Product_CreateProduct",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update a product.",
        "operationId": "Product_UpdateProduct",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a product.",
        "operationId": "Product_GetProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update a product.",
        "operationId": "Product_UpdateProduct2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product.",
        "operationId": "Product_DeleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product/dapper": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get products via dapper.",
        "operationId": "Product_GetProductWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product/export": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Export products.",
        "operationId": "Product_ExportProducts",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/product/staging/sync": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Trigger a sync of staged products.",
        "operationId": "Product_SyncStagedProducts",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncProductStagedChangesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productmapping/search": {
      "post": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Search product mappings using available filters.",
        "operationId": "ProductMapping_SearchProductMappings",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productmapping": {
      "get": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Get a list of all product mappings.",
        "operationId": "ProductMapping_GetProductMappingList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMappingDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Create a new product mapping.",
        "operationId": "ProductMapping_CreateProductMapping",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productmapping/{id}": {
      "get": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Get a product mapping.",
        "operationId": "ProductMapping_GetProductMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Update a product mapping.",
        "operationId": "ProductMapping_UpdateProductMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Delete a product mapping.",
        "operationId": "ProductMapping_DeleteProductMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productmapping/dapper": {
      "get": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Get product mappings via dapper.",
        "operationId": "ProductMapping_GetProductMappingWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productmapping/export": {
      "post": {
        "tags": [
          "ProductMapping"
        ],
        "summary": "Export product mappings.",
        "operationId": "ProductMapping_ExportProductMappings",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstage/search": {
      "post": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Search product stages using available filters.",
        "operationId": "ProductStage_SearchProductStages",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductStagesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductStageDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstage": {
      "get": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Get a list of all product stages.",
        "operationId": "ProductStage_GetProductStageList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStageDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Create a new product stage.",
        "operationId": "ProductStage_CreateProductStage",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductStageRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstage/{id}": {
      "get": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Get a product stage.",
        "operationId": "ProductStage_GetProductStage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStageDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Update a product stage.",
        "operationId": "ProductStage_UpdateProductStage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStageRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Delete a product stage.",
        "operationId": "ProductStage_DeleteProductStage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstage/dapper": {
      "get": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Get product stages via dapper.",
        "operationId": "ProductStage_GetProductStageWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStageDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstage/export": {
      "post": {
        "tags": [
          "ProductStage"
        ],
        "summary": "Export product stages.",
        "operationId": "ProductStage_ExportProductStages",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductStagesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedule/search": {
      "post": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Search product stage schedules using available filters.",
        "operationId": "ProductStageSchedule_SearchProductStageSchedules",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductStageSchedulesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductStageScheduleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedule": {
      "get": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Get a list of all product stage schedules.",
        "operationId": "ProductStageSchedule_GetProductStageScheduleList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStageScheduleDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Create a new product stage schedule.",
        "operationId": "ProductStageSchedule_CreateProductStageSchedule",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductStageScheduleRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedule/{id}": {
      "get": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Get a product stage schedule.",
        "operationId": "ProductStageSchedule_GetProductStageSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStageScheduleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Update a product stage schedule.",
        "operationId": "ProductStageSchedule_UpdateProductStageSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStageScheduleRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Delete a product stage schedule.",
        "operationId": "ProductStageSchedule_DeleteProductStageSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedule/export": {
      "post": {
        "tags": [
          "ProductStageSchedule"
        ],
        "summary": "Export product stage schedules.",
        "operationId": "ProductStageSchedule_ExportProductStageSchedules",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductStageSchedulesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedulemapping/search": {
      "post": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Search product stage schedule mappings using available filters.",
        "operationId": "ProductStageScheduleMapping_SearchProductStageScheduleMappings",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductStageScheduleMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductStageScheduleMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedulemapping": {
      "get": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Get a list of all product stage schedule mappings.",
        "operationId": "ProductStageScheduleMapping_GetProductStageScheduleMappingList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStageScheduleMappingDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Create a new product stage schedule mapping.",
        "operationId": "ProductStageScheduleMapping_CreateProductStageScheduleMapping",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductStageScheduleMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedulemapping/{id}": {
      "get": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Get a product stage schedule mapping.",
        "operationId": "ProductStageScheduleMapping_GetProductStageScheduleMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStageScheduleMappingDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Update a product stage schedule mapping.",
        "operationId": "ProductStageScheduleMapping_UpdateProductStageScheduleMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStageScheduleMappingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Delete a product stage schedule mapping.",
        "operationId": "ProductStageScheduleMapping_DeleteProductStageScheduleMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productstageschedulemapping/export": {
      "post": {
        "tags": [
          "ProductStageScheduleMapping"
        ],
        "summary": "Export product stage schedule mappings.",
        "operationId": "ProductStageScheduleMapping_ExportProductStageScheduleMappings",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductStageScheduleMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productsubcategory/search": {
      "post": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Search product subcategories using available filters.",
        "operationId": "ProductSubcategory_SearchProductSubcategories",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductSubcategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductSubcategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productsubcategory": {
      "get": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Get a list of all product subcategories.",
        "operationId": "ProductSubcategory_GetProductSubcategoryList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSubcategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Create a new product subcategory.",
        "operationId": "ProductSubcategory_CreateProductSubcategory",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductSubcategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productsubcategory/{id}": {
      "get": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Get a product subcategory.",
        "operationId": "ProductSubcategory_GetProductSubcategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSubcategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Update a product subcategory.",
        "operationId": "ProductSubcategory_UpdateProductSubcategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductSubcategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Delete a product subcategory.",
        "operationId": "ProductSubcategory_DeleteProductSubcategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productsubcategory/dapper": {
      "get": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Get product subcategories via dapper.",
        "operationId": "ProductSubcategory_GetProductSubcategoryWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSubcategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/productsubcategory/export": {
      "post": {
        "tags": [
          "ProductSubcategory"
        ],
        "summary": "Export product subcategories.",
        "operationId": "ProductSubcategory_ExportProductSubcategories",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductSubcategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttaxonomy/search": {
      "post": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Search product taxonomies using available filters.",
        "operationId": "ProductTaxonomy_SearchProductTaxonomies",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductTaxonomiesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductTaxonomyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttaxonomy": {
      "get": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Get a list of all product taxonomies.",
        "operationId": "ProductTaxonomy_GetProductTaxonomyList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTaxonomyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Create a new product taxonomy.",
        "operationId": "ProductTaxonomy_CreateProductTaxonomy",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductTaxonomyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttaxonomy/{id}": {
      "get": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Get a product taxonomy.",
        "operationId": "ProductTaxonomy_GetProductTaxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTaxonomyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Update a product taxonomy.",
        "operationId": "ProductTaxonomy_UpdateProductTaxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductTaxonomyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Delete a product taxonomy.",
        "operationId": "ProductTaxonomy_DeleteProductTaxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttaxonomy/dapper": {
      "get": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Get product taxonomies via dapper.",
        "operationId": "ProductTaxonomy_GetProductTaxonomyWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTaxonomyDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttaxonomy/export": {
      "post": {
        "tags": [
          "ProductTaxonomy"
        ],
        "summary": "Export product taxonomies.",
        "operationId": "ProductTaxonomy_ExportProductTaxonomies",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductTaxonomiesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttype/search": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Search product types using available filters.",
        "operationId": "ProductType_SearchProductTypes",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProductTypesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfProductTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttype": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get a list of all product types.",
        "operationId": "ProductType_GetProductTypeList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Create a new product type.",
        "operationId": "ProductType_CreateProductType",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttype/{id}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get a product type.",
        "operationId": "ProductType_GetProductType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProductType"
        ],
        "summary": "Update a product type.",
        "operationId": "ProductType_UpdateProductType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Delete a product type.",
        "operationId": "ProductType_DeleteProductType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttype/dapper": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get a product type via dapper.",
        "operationId": "ProductType_GetProductTypeWithDapper",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/producttype/export": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Export product types.",
        "operationId": "ProductType_ExportProductTypes",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportProductTypesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/reseller/invoice/{memberId}": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get a list of reseller invoices for a given reseller.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "Reseller_GetResellerInvoices",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of reseller invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResellerInvoiceDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/reseller/program/{memberId}": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get a list of reseller programs for a given reseller memberId.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "Reseller_GetResellerPrograms",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of reseller programs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResellerProgramDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/reseller/product/{memberId}": {
      "get": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get a list of reseller products for a given reseller member Id.",
        "description": "Sample request:\n\n    6CE198A5-3B1B-493F-9FCC-BF893E3053E6",
        "operationId": "Reseller_GetResellerProducts",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The Id of the member.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of reseller products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResellerProductDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/reseller/progress": {
      "post": {
        "tags": [
          "Reseller"
        ],
        "summary": "Get a list of student course progresses with optional filters for a given reseller.",
        "description": "Status Types: \"Completed\",\"Not Started\",\"In Progress\",\"Expired\"\n            \n    {\n        \"memberId\": \"6CE198A5-3B1B-493F-9FCC-BF893E3053E6\",\n        \"programCode\": \"PLSALES\",\n        \"statuses\": \"Completed,Not Started,In Progress\",\n        \"studentName\": \"Cindy\"\n    }",
        "operationId": "Reseller_GetResellerMemberCourseProgresses",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the memberId of the reseller and optional program code, student name, status filters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResellerMemberCourseProgressListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the list of reseller member course progress.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResellerMemberCourseProgressDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/salestaxcategory/search": {
      "post": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Search sales tax categories using available filters.",
        "operationId": "SalesTaxCategory_SearchSalesTaxCategories",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSalesTaxCategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfSalesTaxCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/salestaxcategory": {
      "get": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Get a list of all sales tax categories.",
        "operationId": "SalesTaxCategory_GetSalesTaxCategoryList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesTaxCategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Create a new sales tax category.",
        "operationId": "SalesTaxCategory_CreateSalesTaxCategory",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalesTaxCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/salestaxcategory/{id}": {
      "get": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Get a sales tax category.",
        "operationId": "SalesTaxCategory_GetSalesTaxCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesTaxCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Update a sales tax category.",
        "operationId": "SalesTaxCategory_UpdateSalesTaxCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSalesTaxCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Delete a sales tax category.",
        "operationId": "SalesTaxCategory_DeleteSalesTaxCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/salestaxcategory/export": {
      "post": {
        "tags": [
          "SalesTaxCategory"
        ],
        "summary": "Export sales tax categories.",
        "operationId": "SalesTaxCategory_ExportSalesTaxCategories",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportSalesTaxCategoriesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/shipping/ups/rate": {
      "post": {
        "tags": [
          "Shipping"
        ],
        "summary": "Get a shipping rate for a given list of products, quantities and ship to address.",
        "description": "Sample request:\n\n    POST /ups/rate\n    {\n        \"memberId\": \"61AD3B70-2015-4CC0-BF3C-B0DE58F3FDD8\",\n        \"orderNumber\": \"ORD67890-ORDER-TEST\",\n        \"toAddress\": {\n            \"address1\": \"1005 Moss ln\",\n            \"city\": \"Templeton\",\n            \"state\": \"CA\",\n            \"zip\": \"93465\",\n            \"country\": \"US\"\n        },\n        \"fromAddress\": {\n            \"address1\": \"4801 Forest Run Rd.\",\n            \"address2\": \"Ste #201\",\n            \"city\": \"Madison\",\n            \"state\": \"WI\",\n            \"zip\": \"53704\",\n            \"country\": \"US\"\n        },\n        \"weight\": 15.0\n    }",
        "operationId": "Shipping_GetUPSGroundShippingRate",
        "requestBody": {
          "x-name": "request",
          "description": "The request object containing the necessary information to calculate the shipping rate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUPSGroundShippingRateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the shipping rate details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingRateDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription/search": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Search subscriptions using available filters.",
        "operationId": "Subscription_SearchSubscriptions",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfSubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of all subscriptions.",
        "operationId": "Subscription_GetSubscriptionList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create a new subscription.",
        "operationId": "Subscription_CreateSubscription",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get subscription.",
        "operationId": "Subscription_GetSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Update a subscription.",
        "operationId": "Subscription_UpdateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a subscription.",
        "operationId": "Subscription_DeleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription/export": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Export subscriptions.",
        "operationId": "Subscription_ExportSubscriptions",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportSubscriptionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/umbracoorder/search": {
      "post": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Search umbraco orders using available filters.",
        "operationId": "UmbracoOrder_SearchUmbracoOrders",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUmbracoOrdersRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponseOfUmbracoOrderDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/umbracoorder": {
      "get": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Get a list of all umbraco orders.",
        "operationId": "UmbracoOrder_GetUmbracoOrderList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UmbracoOrderDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Create a new umbraco order.",
        "operationId": "UmbracoOrder_CreateUmbracoOrder",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUmbracoOrderRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Update a umbraco order.",
        "operationId": "UmbracoOrder_UpdateUmbracoOrder",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUmbracoOrderRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/umbracoorder/{orderId}": {
      "get": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Get an umbraco order.",
        "operationId": "UmbracoOrder_GetUmbracoOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UmbracoOrderDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Delete a umbraco order by Id.",
        "operationId": "UmbracoOrder_DeleteUmbracoOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/v1/umbracoorder/export": {
      "post": {
        "tags": [
          "UmbracoOrder"
        ],
        "summary": "Export umbraco orders to csv.",
        "operationId": "UmbracoOrder_ExportUmbracoOrders",
        "requestBody": {
          "x-name": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportUmbracoOrdersRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-KEY": []
          },
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Subscription": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "subscriberId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "callbackUrl": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "refreshTokenExpiryTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "exception": {
            "type": "string",
            "nullable": true
          },
          "errorId": {
            "type": "string",
            "nullable": true
          },
          "supportMessage": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TokenRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "AgentEventRegistrationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Gets or sets the company identifier.",
            "format": "guid",
            "nullable": true
          },
          "companyImisId": {
            "type": "string",
            "description": "Gets or sets the company IMIS identifier."
          },
          "companyName": {
            "type": "string",
            "description": "Gets or sets the name of the company."
          },
          "companyAddress1": {
            "type": "string",
            "description": "Gets or sets the company address line 1."
          },
          "companyCity": {
            "type": "string",
            "description": "Gets or sets the company city."
          },
          "companyState": {
            "type": "string",
            "description": "Gets or sets the company state."
          },
          "companyZip": {
            "type": "string",
            "description": "Gets or sets the company ZIP code."
          },
          "memberId": {
            "type": "string",
            "description": "Gets or sets the member identifier.",
            "format": "guid",
            "nullable": true
          },
          "memberImisId": {
            "type": "string",
            "description": "Gets or sets the member IMIS identifier."
          },
          "firstName": {
            "type": "string",
            "description": "Gets or sets the first name of the member."
          },
          "lastName": {
            "type": "string",
            "description": "Gets or sets the last name of the member."
          },
          "meetingCode": {
            "type": "string",
            "description": "Gets or sets the meeting identifier.",
            "nullable": true
          },
          "meetingTitle": {
            "type": "string",
            "description": "Gets or sets the meeting title.",
            "nullable": true
          },
          "isRegistered": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the member is registered.",
            "nullable": true
          }
        }
      },
      "GetAgentEventRegistrationsByEventRequest": {
        "type": "object",
        "description": "Request to get a list of agent event registrations.",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "meetingCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GetAgentEventRegistrationsByIndividualRequest": {
        "type": "object",
        "description": "Request to get a list of agent event registrations by agent member id.",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "agentMemberId": {
            "type": "string",
            "format": "guid"
          },
          "meetingTypes": {
            "type": "string",
            "nullable": true
          },
          "months": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "AgentMeetingEventDetailDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "meetingCode": {
            "type": "string",
            "description": "Gets or sets the meeting code."
          },
          "meetingTitle": {
            "type": "string",
            "description": "Gets or sets the meeting title."
          },
          "beginDate": {
            "type": "string",
            "description": "Gets or sets the begin date of the meeting.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets the end date of the meeting.",
            "format": "date-time"
          }
        }
      },
      "GetAgentEventRegistrationsEventListRequest": {
        "type": "object",
        "description": "Request to get a list of agent event registrations.",
        "additionalProperties": false,
        "properties": {
          "meetingTypes": {
            "type": "string",
            "nullable": true
          },
          "months": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GetAgentEventRegistrationsIndividualListRequest": {
        "type": "object",
        "description": "Request to get a list of agent event registrations.",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "OfficeClosureDto": {
        "type": "object",
        "description": "A single day partial or full office closure.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the office closure.",
            "format": "int32"
          },
          "calendarDate": {
            "type": "string",
            "description": "The date of the office closure.",
            "format": "date-time"
          },
          "officeClosed": {
            "type": "boolean",
            "description": "Indicates whether the office is closed for the entire day."
          },
          "officeClosedAm": {
            "type": "boolean",
            "description": "Indicates whether the office is closed for the morning (AM) hours."
          },
          "officeClosedPm": {
            "type": "boolean",
            "description": "Indicates whether the office is closed for the afternoon (PM) hours."
          }
        }
      },
      "PaginationResponseOfCertificateProgramDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/CertificateProgramDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "CertificateProgramDto": {
        "type": "object",
        "description": "Certificate programs are iMIS groupings of courses that lead to an optional outcome.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the certificate program.",
            "format": "guid"
          },
          "code": {
            "type": "string",
            "description": "The code of the certificate program."
          },
          "name": {
            "type": "string",
            "description": "The name of the certificate program."
          },
          "status": {
            "type": "string",
            "description": "The status of the certificate program."
          },
          "type": {
            "type": "string",
            "description": "The type of the certificate program."
          },
          "designation": {
            "type": "string",
            "description": "Realtor or misc designations associated with a certificate program."
          }
        }
      },
      "SearchCertificateProgramsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "description": "Searches for certificate programs based on the provided criteria.",
            "additionalProperties": false
          }
        ]
      },
      "PaginationFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "pageNumber": {
                "type": "integer",
                "description": "Page number of the results to retrieve.",
                "format": "int32",
                "example": 1
              },
              "pageSize": {
                "type": "integer",
                "description": "Number of items to include per page.",
                "format": "int32",
                "example": 10
              },
              "orderBy": {
                "type": "array",
                "description": "Array of fields to order the results by.",
                "nullable": true,
                "example": [
                  "LastName",
                  "FirstName"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "BaseFilter": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "advancedSearch": {
            "description": "Column-wise search is supported.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Search"
              }
            ]
          },
          "keyword": {
            "type": "string",
            "description": "Keyword to search in all the available columns of the resource.",
            "nullable": true
          },
          "advancedFilter": {
            "description": "Advanced column filtering with logical operators and query operators is supported.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Filter"
              }
            ]
          }
        }
      },
      "Search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fields": {
            "type": "array",
            "description": "List of fields to search in.",
            "items": {
              "type": "string"
            }
          },
          "keyword": {
            "type": "string",
            "description": "Keyword to search for.",
            "nullable": true
          }
        }
      },
      "Filter": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "logic": {
            "type": "string",
            "description": "Logical operator to combine the filters.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "description": "Collection of nested filters.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "field": {
            "type": "string",
            "description": "Field to apply the filter on.",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "description": "Operator to use for filtering.",
            "nullable": true
          },
          "value": {
            "description": "Value to compare against.",
            "nullable": true
          }
        }
      },
      "CreateCertificateProgramRequest": {
        "type": "object",
        "description": "Request to create a certificate program that will group related courses.",
        "additionalProperties": false,
        "required": [
          "code",
          "name",
          "status",
          "type",
          "designation"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional id one will get created if not provided.",
            "format": "guid",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Unique entity key for certificate programs, ex. CE2324, GRI2013.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of title of the certificate program.",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string",
            "description": "CertificateProgram status 'C' or 'A'.",
            "maxLength": 20,
            "minLength": 1,
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "CertificateProgram type either 'WEB' or empty.",
            "maxLength": 50,
            "minLength": 1,
            "nullable": false
          },
          "designation": {
            "type": "string",
            "description": "Designations related to the certificate program.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateCertificateProgramRequest": {
        "type": "object",
        "description": "Represents a request to update a CertificateProgram.",
        "additionalProperties": false,
        "required": [
          "id",
          "code",
          "name",
          "type",
          "status",
          "designation"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id for the certificate program.",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Unique program code from iMIS",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of the program certificate program.",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "Type of the program 'WEB' or empty string.",
            "maxLength": 50,
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string",
            "description": "Status of the program 'A' for active 'C' for closed.",
            "maxLength": 20,
            "minLength": 1,
            "nullable": false
          },
          "designation": {
            "type": "string",
            "description": "Optional designation that the program credits will count towards.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "ExportCertificateProgramsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "description": "Represents a request to export certificate programs CertificateProgram based on filtering criteria.",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfCommitteeDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/CommitteeDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "CommitteeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "committeeCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "SearchCommitteesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateCommitteeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "committeeCode"
        ],
        "properties": {
          "committeeCode": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "title": {
            "type": "string"
          }
        }
      },
      "UpdateCommitteeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "committeeCode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "committeeCode": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ExportCommitteesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfCompanyDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "CompanyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "iMISId": {
            "type": "string"
          },
          "organizationCode": {
            "type": "string"
          },
          "memberTypeId": {
            "type": "string",
            "format": "guid"
          },
          "memberType": {
            "type": "string"
          },
          "memberTypeDescription": {
            "type": "string"
          },
          "isMember": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "websiteUrl": {
            "type": "string"
          }
        }
      },
      "SearchCompaniesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateCompanyRequest": {
        "type": "object",
        "description": "Represents a request to create a new company.",
        "additionalProperties": false,
        "required": [
          "iMISId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional id one will get created if not provided.",
            "format": "guid",
            "nullable": true
          },
          "iMISId": {
            "type": "string",
            "description": "The iMIS ID of the company.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization code of the company."
          },
          "memberTypeId": {
            "type": "string",
            "description": "The member type ID of the company.",
            "format": "guid"
          },
          "category": {
            "type": "string",
            "description": "The category of the company."
          },
          "status": {
            "type": "string",
            "description": "The status of the company."
          },
          "address": {
            "type": "string",
            "description": "The address of the company."
          },
          "name": {
            "type": "string",
            "description": "The name of the company."
          },
          "city": {
            "type": "string",
            "description": "The city of the company."
          },
          "state": {
            "type": "string",
            "description": "The state of the company."
          },
          "zip": {
            "type": "string",
            "description": "The zip code of the company."
          },
          "email": {
            "type": "string",
            "description": "The email of the company."
          },
          "websiteUrl": {
            "type": "string",
            "description": "The website URL of the company."
          },
          "eventEnvelope": {
            "description": "The event envelope associated with the request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          },
          "wrA.Umbraco.Domain.Common.Contracts.IEntityWithId.Id": {}
        }
      },
      "IEventEnvelope": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "eventHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventHistoryItem"
            }
          },
          "traceId": {
            "type": "string",
            "nullable": true
          },
          "spanId": {
            "type": "string",
            "nullable": true
          },
          "messageId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "initiatorId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "sentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "action": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityEventAction"
              }
            ]
          },
          "source": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityEventSource"
              }
            ]
          },
          "originator": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityEventSource"
              }
            ]
          },
          "messageType": {
            "type": "string"
          }
        }
      },
      "EventHistoryItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "eventType": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "payload": {
            "nullable": true
          }
        }
      },
      "EntityEventAction": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Create",
          "Update",
          "Delete"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "EntityEventSource": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "None",
          "UmbracoCloud",
          "UmbracoBridge"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "UpdateCompanyRequest": {
        "type": "object",
        "description": "Represents a request to update a company.",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the company to update.",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "iMISId": {
            "type": "string",
            "description": "The iMIS ID of the company."
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization code of the company."
          },
          "memberTypeId": {
            "type": "string",
            "description": "The member type ID of the company.",
            "format": "guid"
          },
          "category": {
            "type": "string",
            "description": "The category of the company."
          },
          "status": {
            "type": "string",
            "description": "The status of the company."
          },
          "address": {
            "type": "string",
            "description": "The address of the company."
          },
          "name": {
            "type": "string",
            "description": "The name of the company."
          },
          "city": {
            "type": "string",
            "description": "The city of the company."
          },
          "state": {
            "type": "string",
            "description": "The state of the company."
          },
          "zip": {
            "type": "string",
            "description": "The zip code of the company."
          },
          "email": {
            "type": "string",
            "description": "The email of the company."
          },
          "websiteUrl": {
            "type": "string",
            "description": "The website URL of the company."
          },
          "eventEnvelope": {
            "description": "The event envelope associated with the request.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          },
          "wrA.Umbraco.Domain.Common.Contracts.IEntityWithId.Id": {}
        }
      },
      "ExportCompaniesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "StagedEntityChangesOfCompanyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            }
          },
          "updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            }
          }
        }
      },
      "SyncCompanyStagedChangesRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "iMISId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CompanyEducationHistoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "imisId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyName": {
            "type": "string"
          },
          "companyAddress1": {
            "type": "string"
          },
          "companyCity": {
            "type": "string"
          },
          "companyState": {
            "type": "string"
          },
          "programId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "programCode": {
            "type": "string"
          },
          "registrationItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCompanyEducationHistoryListRequest": {
        "type": "object",
        "description": "Request to get a list of company education history records.",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "programCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CompanyMemberEducationHistoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "memberImisId": {
            "type": "string"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          },
          "programId": {
            "type": "string",
            "format": "guid"
          },
          "programCode": {
            "type": "string"
          },
          "componentCode": {
            "type": "string"
          },
          "componentName": {
            "type": "string"
          },
          "certificateId": {
            "type": "integer",
            "format": "int32"
          },
          "hasPdf": {
            "type": "boolean"
          }
        }
      },
      "GetCompanyMemberEducationHistoryListRequest": {
        "type": "object",
        "description": "Request to get a list of company member education history records.",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "agentMemberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "programCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaginationResponseOfCompanySubscriptionDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/CompanySubscriptionDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "CompanySubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "companyId": {
            "type": "string",
            "format": "guid"
          },
          "companyEmail": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productSku": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "productDescription": {
            "type": "string"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SearchCompanySubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateCompanySubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId",
          "status",
          "beginDate",
          "paidThru"
        ],
        "properties": {
          "companyId": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "beginDate": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateCompanySubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ExportCompanySubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfDesignationDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/DesignationDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "DesignationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "designationCode": {
            "type": "string"
          },
          "designationText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "sortSeqn": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SearchDesignationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateDesignationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "designationCode"
        ],
        "properties": {
          "designationCode": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "designationText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "sortSeqn": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateDesignationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "designationCode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "designationCode": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "designationText": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortSeqn": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ExportDesignationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfDiscountDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/DiscountDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "DiscountDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "sku": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SearchDiscountsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateDiscountRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "title": {
            "type": "string"
          },
          "discountRule": {
            "type": "string"
          }
        }
      },
      "UpdateDiscountRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "title": {
            "type": "string"
          },
          "discountRule": {
            "type": "string"
          }
        }
      },
      "ExportDiscountsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FundraisingReportDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileBytes": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "GetFundraisingReportRequest": {
        "type": "object",
        "description": "Request object for retrieving a list of reseller invoices for a given member.",
        "additionalProperties": false,
        "required": [
          "reportId"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "reportId": {
            "type": "integer",
            "format": "int32",
            "nullable": false
          },
          "useMemberChapter": {
            "type": "boolean"
          },
          "mimeType": {
            "type": "string"
          },
          "reportParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "HousingStatisticDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "grandparentName": {
            "type": "string"
          },
          "parentName": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "childName": {
            "type": "string"
          },
          "dateInterval": {
            "type": "string"
          },
          "yearNumber": {
            "type": "integer",
            "format": "int32"
          },
          "datePartNumber": {
            "type": "integer",
            "format": "int32"
          },
          "datePartName": {
            "type": "string"
          },
          "medianSalePrice": {
            "type": "number",
            "format": "decimal"
          },
          "soldCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateLegalHotlineCallRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "question": {
            "type": "string"
          },
          "responseMethod": {
            "type": "string"
          },
          "letterRequested": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string"
          },
          "responsePhone": {
            "type": "string"
          },
          "callbackWindowStart": {
            "type": "string",
            "format": "date-time"
          },
          "callbackWindowEnd": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaginationResponseOfLocalBoardDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/LocalBoardDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "LocalBoardDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "chapter": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rosterOptIn": {
            "type": "boolean"
          },
          "rosterOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SearchLocalBoardsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateLocalBoardRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "chapter"
        ],
        "properties": {
          "chapter": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string"
          },
          "rosterOptIn": {
            "type": "boolean"
          },
          "rosterOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateLocalBoardRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "chapter"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "chapter": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string"
          },
          "rosterOptIn": {
            "type": "boolean"
          },
          "rosterOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ExportLocalBoardsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfMemberCommitteeDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberCommitteeDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "MemberCommitteeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "committeeId": {
            "type": "string",
            "format": "guid"
          },
          "committeeName": {
            "type": "string"
          },
          "committeeTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberCommitteeTermDto"
            }
          }
        }
      },
      "MemberCommitteeTermDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberCommitteeId": {
            "type": "string",
            "format": "guid"
          },
          "committeeTerm": {
            "type": "string",
            "nullable": true
          },
          "isCurrent": {
            "type": "boolean",
            "nullable": true
          },
          "positionCode": {
            "type": "string"
          },
          "positionName": {
            "type": "string"
          }
        }
      },
      "SearchMemberCommitteesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberCommitteeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberId",
          "committeeId"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "committeeId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateMemberCommitteeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "committeeId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "ExportMemberCommitteesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MemberComponentProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "iMISId": {
            "type": "string"
          },
          "program": {
            "type": "string"
          },
          "component": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "goodThruDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "certificateSequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "licenseType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "licenseNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "credentialHolderId": {
            "type": "string",
            "nullable": true
          },
          "courseLauncherUrl": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "unitsRequired": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "unitsEarned": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "sortSequence": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaginationResponseOfMemberDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "MemberDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "iMISId": {
            "type": "string"
          },
          "nrdsId": {
            "type": "string"
          },
          "commonId": {
            "type": "integer",
            "format": "int32"
          },
          "passwordHash": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "lastFirst": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvince": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "marketingEmail": {
            "type": "string"
          },
          "brokerFullName": {
            "type": "string"
          },
          "brokerEmail": {
            "type": "string"
          },
          "homePhone": {
            "type": "string"
          },
          "workPhone": {
            "type": "string"
          },
          "cellPhone": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "mandatoryHotlineLetter": {
            "type": "boolean"
          },
          "canUseHotline": {
            "type": "boolean"
          },
          "fax": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "minnesotaLicense": {
            "type": "string"
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companyLogoUrl": {
            "type": "string",
            "nullable": true
          },
          "memberTypeId": {
            "type": "string",
            "format": "guid"
          },
          "memberTypeCode": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "primaryLocalBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "primaryLocalBoardChapter": {
            "type": "string",
            "nullable": true
          },
          "primaryLocalBoardName": {
            "type": "string",
            "nullable": true
          },
          "localBoards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalBoardDto"
            }
          },
          "paidThruDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fairhavenDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "directWorkPhone": {
            "type": "string",
            "nullable": true
          },
          "personalWebsite": {
            "type": "string",
            "nullable": true
          },
          "primaryCounties": {
            "type": "string",
            "nullable": true
          },
          "areaOfSpecialty": {
            "type": "string",
            "nullable": true
          },
          "secondaryLanguage": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchMembersRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MemberWithDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "iMISId": {
            "type": "string"
          },
          "nrdsId": {
            "type": "string"
          },
          "commonId": {
            "type": "integer",
            "format": "int32"
          },
          "passwordHash": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "lastFirst": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvince": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "marketingEmail": {
            "type": "string"
          },
          "brokerFullName": {
            "type": "string"
          },
          "brokerEmail": {
            "type": "string"
          },
          "homePhone": {
            "type": "string"
          },
          "workPhone": {
            "type": "string"
          },
          "cellPhone": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "mandatoryHotlineLetter": {
            "type": "boolean"
          },
          "canUseHotline": {
            "type": "boolean"
          },
          "fax": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "minnesotaLicense": {
            "type": "string"
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companyLogoUrl": {
            "type": "string"
          },
          "memberTypeId": {
            "type": "string",
            "format": "guid"
          },
          "memberTypeCode": {
            "type": "string"
          },
          "memberType": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MemberTypeDto"
              }
            ]
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyName": {
            "type": "string"
          },
          "company": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyDto"
              }
            ]
          },
          "primaryLocalBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "primaryLocalBoardChapter": {
            "type": "string"
          },
          "primaryLocalBoard": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalBoardDto"
              }
            ]
          },
          "primaryLocalBoardName": {
            "type": "string"
          },
          "localBoards": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LocalBoardDto"
            }
          },
          "paidThruDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fairhavenDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "memberSubscriptions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MemberSubscriptionDto"
            }
          },
          "companySubscriptions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CompanySubscriptionDto"
            }
          },
          "committees": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MemberCommitteeDto"
            }
          }
        }
      },
      "MemberTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isMember": {
            "type": "boolean"
          }
        }
      },
      "MemberSubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "memberEmail": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productSku": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "productDescription": {
            "type": "string"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateMemberRequest": {
        "type": "object",
        "description": "This is a request that can be adapted from MemberEvents. It returns the Member Id that was created.\nThe request is validated to ensure that the email and Id are unique.\nThe ITransientService ensures this gets registered with DI allowing for easy instantiation.",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "passwordHash": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "memberTypeId": {
            "type": "string",
            "format": "guid"
          },
          "iMISId": {
            "type": "string",
            "nullable": true
          },
          "nrdsId": {
            "type": "string",
            "nullable": true
          },
          "commonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "lastFirst": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "marketingEmail": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "brokerFullName": {
            "type": "string",
            "nullable": true
          },
          "brokerEmail": {
            "type": "string",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "mandatoryHotlineLetter": {
            "type": "boolean",
            "nullable": true
          },
          "canUseHotline": {
            "type": "boolean",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "minnesotaLicense": {
            "type": "string",
            "nullable": true
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "primaryLocalBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyLogoUrl": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "paidThruDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fairhavenDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "directWorkPhone": {
            "type": "string",
            "nullable": true
          },
          "personalWebsite": {
            "type": "string",
            "nullable": true
          },
          "primaryCounties": {
            "type": "string",
            "nullable": true
          },
          "areaOfSpecialty": {
            "type": "string",
            "nullable": true
          },
          "secondaryLanguage": {
            "type": "string",
            "nullable": true
          },
          "eventEnvelope": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          }
        }
      },
      "UpdateMemberRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "maxLength": 75,
            "minLength": 0,
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "passwordSalt": {
            "type": "string",
            "nullable": true
          },
          "memberTypeId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "iMISId": {
            "type": "string",
            "nullable": true
          },
          "nrdsId": {
            "type": "string",
            "nullable": true
          },
          "commonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "lastFirst": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "marketingEmail": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "brokerFullName": {
            "type": "string",
            "nullable": true
          },
          "brokerEmail": {
            "type": "string",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "mandatoryHotlineLetter": {
            "type": "boolean",
            "nullable": true
          },
          "canUseHotline": {
            "type": "boolean",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "minnesotaLicense": {
            "type": "string",
            "nullable": true
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "primaryLocalBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyLogoUrl": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "paidThruDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fairhavenDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "directWorkPhone": {
            "type": "string",
            "nullable": true
          },
          "personalWebsite": {
            "type": "string",
            "nullable": true
          },
          "primaryCounties": {
            "type": "string",
            "nullable": true
          },
          "areaOfSpecialty": {
            "type": "string",
            "nullable": true
          },
          "secondaryLanguage": {
            "type": "string",
            "nullable": true
          },
          "eventEnvelope": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          }
        }
      },
      "ExportMembersRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SyncMemberStagedChangesRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "iMISId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MemberCourseCertificateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "memberImisId": {
            "type": "string"
          },
          "memberName": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programCode": {
            "type": "string"
          },
          "programTitle": {
            "type": "string"
          },
          "registrationItem": {
            "type": "string"
          },
          "courseTitle": {
            "type": "string"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "certificateId": {
            "type": "integer",
            "format": "int32"
          },
          "downloadable": {
            "type": "boolean"
          }
        }
      },
      "MemberCourseProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "memberIsAdmin": {
            "type": "boolean"
          },
          "adminId": {
            "type": "string",
            "format": "guid"
          },
          "courseId": {
            "type": "string",
            "format": "guid"
          },
          "courseToken": {
            "type": "string",
            "format": "guid"
          },
          "courseType": {
            "type": "string"
          },
          "isExamOnly": {
            "type": "boolean"
          },
          "courseHasCertificate": {
            "type": "boolean"
          },
          "trackPercentComplete": {
            "type": "number",
            "format": "decimal"
          },
          "courseGroupId": {
            "type": "string",
            "format": "guid"
          },
          "courseGroupTitle": {
            "type": "string"
          },
          "courseGroupSortSequence": {
            "type": "integer",
            "format": "int32"
          },
          "courseTitle": {
            "type": "string"
          },
          "courseSubtitle": {
            "type": "string"
          },
          "courseDescription": {
            "type": "string"
          },
          "courseSortSequence": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originalGoodThroughDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "goodThroughDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastAccessedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "percentComplete": {
            "type": "number",
            "format": "decimal"
          },
          "completed": {
            "type": "boolean"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "certificateSequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isExtendable": {
            "type": "boolean"
          },
          "extensionWindow": {
            "type": "integer",
            "format": "int32"
          },
          "extensionDays": {
            "type": "integer",
            "format": "int32"
          },
          "extensionProductCode": {
            "type": "string",
            "nullable": true
          },
          "externalRequirements": {
            "type": "string",
            "nullable": true
          },
          "notificationMessage": {
            "type": "string",
            "nullable": true
          },
          "notificationColor": {
            "type": "string",
            "nullable": true
          },
          "notificationSort": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaginationResponseOfMemberDesignationDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberDesignationDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "MemberDesignationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "designationId": {
            "type": "string",
            "format": "guid"
          },
          "designationCode": {
            "type": "string"
          },
          "designationText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "SearchMemberDesignationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberDesignationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberId",
          "designationId"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "designationId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateMemberDesignationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "designationId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "ExportMemberDesignationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MemberDonationContributionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "calendarYear": {
            "type": "integer",
            "format": "int32"
          },
          "fundShortName": {
            "type": "string"
          },
          "fundLongName": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "MemberDuesInvoiceDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "duesInvoiceToken": {
            "type": "string",
            "format": "guid"
          },
          "dateInserted": {
            "type": "string",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "iMISId": {
            "type": "integer",
            "format": "int32"
          },
          "totalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "description": {
            "type": "string"
          },
          "localBoardId": {
            "type": "string",
            "format": "guid"
          },
          "localBoard": {
            "type": "integer",
            "format": "int32"
          },
          "localBoardName": {
            "type": "string"
          },
          "ecControlNumber": {
            "type": "integer",
            "format": "int32"
          },
          "memberId": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "duesBillSeqn": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MemberDuesPaymentStrategyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "duesPaymentStrategy": {
            "$ref": "#/components/schemas/DuesPaymentStrategy"
          },
          "localBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "localBoard": {
            "type": "string",
            "nullable": true
          },
          "localBoardEmail": {
            "type": "string",
            "nullable": true
          },
          "localBoardPhone": {
            "type": "string",
            "nullable": true
          },
          "localBoardWebsite": {
            "type": "string",
            "nullable": true
          },
          "localBoardFullAddress": {
            "type": "string",
            "nullable": true
          },
          "localBoardAddressLine1": {
            "type": "string",
            "nullable": true
          },
          "localBoardAddressLine2": {
            "type": "string",
            "nullable": true
          },
          "localBoardCity": {
            "type": "string",
            "nullable": true
          },
          "localBoardState": {
            "type": "string",
            "nullable": true
          },
          "localBoardZip": {
            "type": "string",
            "nullable": true
          },
          "localBoardFax": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DuesPaymentStrategy": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "HostedDuesPaymentPage",
          "ContactLocalBoard",
          "ContactNAR",
          "Undetermined"
        ],
        "enum": [
          1,
          2,
          3,
          4
        ]
      },
      "MemberDuesPaymentHistoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "paidDate": {
            "type": "string",
            "format": "date-time"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "imisId": {
            "type": "string"
          },
          "localBoardId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "localBoardName": {
            "type": "string"
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyName": {
            "type": "string"
          },
          "invoiceAddress": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "fullAddress": {
            "type": "string"
          },
          "workPhone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "transactionLineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberDuesPaymentHistoryLineItemDto"
            }
          }
        }
      },
      "MemberDuesPaymentHistoryLineItemDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "transactionItemId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "CompanyMemberEthicsTrainingStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "companyId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "memberTrainingStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberEthicsTrainingStatusDto"
            }
          }
        }
      },
      "MemberEthicsTrainingStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "imisId": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PaginationResponseOfMemberLocalBoardDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberLocalBoardDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "MemberLocalBoardDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "localBoardId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "SearchMemberLocalBoardsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberLocalBoardRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberId"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "localBoardId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "UpdateMemberLocalBoardRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localBoardId": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "ExportMemberLocalBoardsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MemberMarketingSubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the subscription.",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "description": "The Id of the member this subscription applies to.",
            "format": "guid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the subscription."
          },
          "marketingSubscriptionId": {
            "type": "string",
            "description": "The marketing subscription definition Id associated with the subscription.",
            "format": "guid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the subscription.."
          },
          "recipient": {
            "type": "string",
            "description": "A description of the subscription.."
          },
          "legalBasis": {
            "type": "string",
            "description": "The legal reason for the current status of the subscription."
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the contact is subscribed.."
          },
          "preferenceGroupName": {
            "type": "string",
            "description": "The name of the preferences group that the subscription is associated with."
          },
          "sourceSystem": {
            "type": "string",
            "description": "Source system the subscription comes from."
          },
          "sourceSystemId": {
            "type": "string",
            "description": "Source system the subscription comes from."
          }
        }
      },
      "UpdateMemberMarketingSubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "MemberOrderHistoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderId": {
            "type": "number",
            "format": "decimal"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "orderTotal": {
            "type": "number",
            "format": "decimal"
          },
          "orderStatus": {
            "type": "string"
          },
          "orderLineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberOrderHistoryLineItemDto"
            }
          }
        }
      },
      "MemberOrderHistoryLineItemDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderId": {
            "type": "number",
            "format": "decimal"
          },
          "lineId": {
            "type": "number",
            "format": "decimal"
          },
          "sku": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "decimal"
          },
          "price": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "PaginationResponseOfMemberSubscriptionDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberSubscriptionDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "SearchMemberSubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberSubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId",
          "status",
          "beginDate",
          "paidThru"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "beginDate": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateMemberSubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ExportMemberSubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfMemberTypeDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberTypeDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "SearchMemberTypesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string"
          },
          "isMember": {
            "type": "boolean"
          }
        }
      },
      "UpdateMemberTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isMember": {
            "type": "boolean"
          }
        }
      },
      "ExportMemberTypesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfMemberTypeMappingDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/MemberTypeMappingDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "MemberTypeMappingDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberTypeCode": {
            "type": "string"
          },
          "newMemberTypeCode": {
            "type": "string"
          }
        }
      },
      "SearchMemberTypeMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateMemberTypeMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberTypeCode"
        ],
        "properties": {
          "memberTypeCode": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "newMemberTypeCode": {
            "type": "string"
          }
        }
      },
      "UpdateMemberTypeMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "memberTypeCode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberTypeCode": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "newMemberTypeCode": {
            "type": "string"
          }
        }
      },
      "ExportMemberTypeMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductCategoryDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "productTypeName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchProductCategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProductCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportProductCategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string"
          },
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "productTypeName": {
            "type": "string"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryName": {
            "type": "string"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryName": {
            "type": "string"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "salesTaxCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "salesTaxCategoryName": {
            "type": "string"
          },
          "salesTaxCategoryCode": {
            "type": "string"
          },
          "productTaxonomyName": {
            "type": "string",
            "nullable": true
          },
          "memberPrice": {
            "type": "number",
            "format": "decimal"
          },
          "nonMemberPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "imageUrl": {
            "type": "string"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "isShippable": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "productStageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStageDto"
            }
          }
        }
      },
      "ProductStageDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "SearchProductsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sku"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "sku": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "memberPrice": {
            "type": "number",
            "format": "decimal"
          },
          "nonMemberPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productQuantityId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productMappingId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "salesTaxCategoryId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean"
          },
          "isShippable": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "eventEnvelope": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          }
        }
      },
      "UpdateProductRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "sku": {
            "type": "string",
            "maxLength": 75,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "memberPrice": {
            "type": "number",
            "format": "decimal"
          },
          "nonMemberPrice": {
            "type": "number",
            "format": "decimal"
          },
          "isTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "isShippable": {
            "type": "boolean",
            "nullable": true
          },
          "productTypeId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "eventEnvelope": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IEventEnvelope"
              }
            ]
          }
        }
      },
      "ExportProductsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SyncProductStagedChangesRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "productId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaginationResponseOfProductMappingDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductMappingDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductMappingDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productCode": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "SearchProductMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sku",
          "productCode"
        ],
        "properties": {
          "sku": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "productCode": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProductMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sku",
          "productCode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "sku": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "productCode": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "productTypeId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productSubcategoryId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "productTaxonomyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportProductMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductStageDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductStageDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "SearchProductStagesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductStageRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateProductStageRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ExportProductStagesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductStageScheduleDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductStageScheduleDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductStageScheduleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productStageId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SearchProductStageSchedulesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductStageScheduleRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId",
          "stageId"
        ],
        "properties": {
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "stageId": {
            "type": "integer",
            "format": "int32",
            "minLength": 1,
            "nullable": false
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateProductStageScheduleRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "stageId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExportProductStageSchedulesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductStageScheduleMappingDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductStageScheduleMappingDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductStageScheduleMappingDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "productMappingId": {
            "type": "string",
            "format": "guid"
          },
          "productStageId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SearchProductStageScheduleMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductStageScheduleMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "productMappingId": {
            "type": "string",
            "format": "guid"
          },
          "productStageId": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateProductStageScheduleMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productStageId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ExportProductStageScheduleMappingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductSubcategoryDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductSubcategoryDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductSubcategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryId": {
            "type": "string",
            "format": "guid"
          },
          "productCategoryName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchProductSubcategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductSubcategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProductSubcategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportProductSubcategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductTaxonomyDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductTaxonomyDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductTaxonomyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchProductTaxonomiesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductTaxonomyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "productTypeId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProductTaxonomyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportProductTaxonomiesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfProductTypeDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/ProductTypeDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "ProductTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SearchProductTypesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateProductTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProductTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportProductTypesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ResellerInvoiceDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderNumber": {
            "type": "number",
            "format": "double"
          },
          "subMonths": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "invoiceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "productTitle": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "priceEach": {
            "type": "number",
            "format": "decimal"
          },
          "balance": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "ResellerProgramDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resellerId": {
            "type": "string",
            "format": "guid"
          },
          "programId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "programCode": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          },
          "studentCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ResellerProductDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resellerId": {
            "type": "string",
            "format": "guid"
          },
          "companySubscriptionId": {
            "type": "string",
            "format": "guid"
          },
          "subscriptionProductId": {
            "type": "string",
            "format": "guid"
          },
          "companyId": {
            "type": "string",
            "format": "guid"
          },
          "companyName": {
            "type": "string"
          },
          "subscriptionProductCode": {
            "type": "string"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time"
          },
          "groupCode": {
            "type": "string"
          },
          "groupTitle": {
            "type": "string"
          },
          "groupDescription": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "productCode": {
            "type": "string"
          },
          "productTitle": {
            "type": "string"
          }
        }
      },
      "ResellerMemberCourseProgressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resellerId": {
            "type": "string",
            "format": "guid"
          },
          "resellerImisId": {
            "type": "string"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "memberImisId": {
            "type": "string"
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "companyImisId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "programId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "programCode": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "programName": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "percentComplete": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "registrationItem": {
            "type": "string"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dataSource": {
            "type": "string"
          }
        }
      },
      "GetResellerMemberCourseProgressListRequest": {
        "type": "object",
        "description": "Request object for retrieving a list of reseller member course progress.",
        "additionalProperties": false,
        "required": [
          "memberId"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "description": "The member Id of the Reseller, this is a required field.",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "programCode": {
            "type": "string",
            "description": "Gets or sets the program code. If not specified, defaults to an empty string, which means all programs will be included.",
            "nullable": true
          },
          "statuses": {
            "type": "string",
            "description": "Gets or sets the statuses. If not specified, defaults to an empty string, which will be interpreted as \"Completed,Not Started,In Progress,Expired\".",
            "nullable": true
          },
          "studentName": {
            "type": "string",
            "description": "Gets or sets the student name. If not specified, defaults to an empty string, which means all student names will be included.",
            "nullable": true
          }
        }
      },
      "PaginationResponseOfSalesTaxCategoryDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/SalesTaxCategoryDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "SalesTaxCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "SearchSalesTaxCategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateSalesTaxCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "code"
        ],
        "properties": {
          "salesTaxTypeId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateSalesTaxCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "maxLength": 75,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "ExportSalesTaxCategoriesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ShippingRateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "carrier": {
            "type": "string"
          },
          "methodName": {
            "type": "string"
          },
          "shippingRate": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "GetUPSGroundShippingRateRequest": {
        "type": "object",
        "description": "Represents a request to get a ShippingRateDto given a list of product quantities and to address.",
        "additionalProperties": false,
        "required": [
          "toAddress"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "description": "The memberId of the ship to customer.",
            "format": "guid",
            "nullable": true
          },
          "orderNumber": {
            "type": "string",
            "description": "The Order number"
          },
          "toAddress": {
            "description": "The address of the ship to customer.",
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/PhysicalAddressDto"
          },
          "fromAddress": {
            "description": "The address the product is shipping from, defaults to WRA.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PhysicalAddressDto"
              }
            ]
          },
          "weight": {
            "type": "number",
            "description": "The weight of the shippable products in lbs.",
            "format": "decimal"
          }
        }
      },
      "PhysicalAddressDto": {
        "type": "object",
        "description": "Physical address for shipping or physical mailing.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The Name of the Recipient",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "1005 Moss ln"
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Templeton"
          },
          "state": {
            "type": "string",
            "description": "CA"
          },
          "zip": {
            "type": "string",
            "description": "93465"
          },
          "country": {
            "type": "string",
            "description": "US"
          }
        }
      },
      "PaginationResponseOfSubscriptionDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "SubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "Product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "sku": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "nullable": true
              },
              "memberPrice": {
                "type": "number",
                "format": "decimal"
              },
              "nonMemberPrice": {
                "type": "number",
                "format": "decimal",
                "nullable": true
              },
              "productTypeId": {
                "type": "string",
                "format": "guid"
              },
              "productType": {
                "$ref": "#/components/schemas/ProductType"
              },
              "productCategoryId": {
                "type": "string",
                "format": "guid"
              },
              "productCategory": {
                "$ref": "#/components/schemas/ProductCategory"
              },
              "productSubcategoryId": {
                "type": "string",
                "format": "guid"
              },
              "productSubcategory": {
                "$ref": "#/components/schemas/ProductSubcategory"
              },
              "productTaxonomyId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "productTaxonomy": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductTaxonomy"
                  }
                ]
              },
              "productQuantityId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "productQuantity": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductQuantity"
                  }
                ]
              },
              "productMappingId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "productMapping": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductMapping"
                  }
                ]
              },
              "salesTaxCategoryId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "salesTaxCategory": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SalesTaxCategory"
                  }
                ]
              },
              "productTags": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductTag"
                }
              },
              "productStageSchedules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStageSchedule"
                }
              },
              "isTaxable": {
                "type": "boolean"
              },
              "isShippable": {
                "type": "boolean"
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "eventStartDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "eventEndDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "location": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ProductType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "nullable": true
              },
              "productCategories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductCategory"
                }
              }
            }
          }
        ]
      },
      "ProductCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "nullable": true
              },
              "productTypeId": {
                "type": "string",
                "format": "guid"
              },
              "productType": {
                "$ref": "#/components/schemas/ProductType"
              },
              "subcategories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductSubcategory"
                }
              }
            }
          }
        ]
      },
      "ProductSubcategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "nullable": true
              },
              "productCategoryId": {
                "type": "string",
                "format": "guid"
              },
              "productCategory": {
                "$ref": "#/components/schemas/ProductCategory"
              }
            }
          }
        ]
      },
      "AuditableEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntityOfGuid"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "AuditableEntityOfGuid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntityOfGuid"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "createdBy": {
                "type": "string",
                "format": "guid"
              },
              "createdOn": {
                "type": "string",
                "format": "date-time"
              },
              "lastModifiedBy": {
                "type": "string",
                "format": "guid"
              },
              "lastModifiedOn": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "deletedOn": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "deletedBy": {
                "type": "string",
                "format": "guid",
                "nullable": true
              }
            }
          }
        ]
      },
      "BaseEntityOfGuid": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The bridge Id of the entity.",
            "format": "guid"
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DomainEvent"
            }
          }
        }
      },
      "DomainEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDomainEvent"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BaseDomainEvent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "occurredOn": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductTaxonomy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ProductQuantity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "defaultQuantity": {
                "type": "integer",
                "format": "int32"
              },
              "stepSize": {
                "type": "integer",
                "format": "int32"
              },
              "max": {
                "type": "integer",
                "format": "int32"
              },
              "min": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ProductMapping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "productCode": {
                "type": "string"
              },
              "sku": {
                "type": "string"
              },
              "productId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "product": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Product"
                  }
                ]
              },
              "productTypeId": {
                "type": "string",
                "format": "guid"
              },
              "productType": {
                "$ref": "#/components/schemas/ProductType"
              },
              "productCategoryId": {
                "type": "string",
                "format": "guid"
              },
              "productCategory": {
                "$ref": "#/components/schemas/ProductCategory"
              },
              "productSubcategoryId": {
                "type": "string",
                "format": "guid"
              },
              "productSubcategory": {
                "$ref": "#/components/schemas/ProductSubcategory"
              },
              "productTaxonomyId": {
                "type": "string",
                "format": "guid"
              },
              "productTaxonomy": {
                "$ref": "#/components/schemas/ProductTaxonomy"
              },
              "salesTaxCategoryId": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "salesTaxCategory": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SalesTaxCategory"
                  }
                ]
              },
              "productStageScheduleMappings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStageScheduleMapping"
                }
              }
            }
          }
        ]
      },
      "SalesTaxCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "code": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "products": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        ]
      },
      "ProductStageScheduleMapping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "productMappingId": {
                "type": "string",
                "format": "guid"
              },
              "productMapping": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductMapping"
                  }
                ]
              },
              "productStageId": {
                "type": "integer",
                "format": "int32"
              },
              "productStage": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductStage"
                  }
                ]
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "ProductStage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32"
              },
              "value": {
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "productStageSchedules": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ProductStageSchedule"
                }
              }
            }
          }
        ]
      },
      "ProductStageSchedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "productId": {
                "type": "string",
                "format": "guid"
              },
              "product": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Product"
                  }
                ]
              },
              "productStageId": {
                "type": "integer",
                "format": "int32"
              },
              "productStage": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductStage"
                  }
                ]
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "BaseEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntityOfGuid"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "ProductTag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "SearchSubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "isMemberSubscription"
        ],
        "properties": {
          "ownerId": {
            "type": "string",
            "format": "guid"
          },
          "isMemberSubscription": {
            "type": "boolean",
            "minLength": 1,
            "nullable": false
          },
          "productId": {
            "type": "string",
            "format": "guid"
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time"
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateSubscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "productId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "status": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "paidThru": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "continuousSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ExportSubscriptionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaginationResponseOfUmbracoOrderDto": {
        "type": "object",
        "description": "Initializes a new instance of the PaginationResponse`1 class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "List of items in the current page.",
            "items": {
              "$ref": "#/components/schemas/UmbracoOrderDto"
            }
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Total count of items.",
            "format": "int32",
            "example": 100
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page.",
            "format": "int32",
            "example": 10
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Indicates whether there is a previous page.",
            "example": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates whether there is a next page.",
            "example": false
          }
        }
      },
      "UmbracoOrderDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "shipToFirstName": {
            "type": "string"
          },
          "shipToLastName": {
            "type": "string"
          },
          "shipToAddressLine1": {
            "type": "string"
          },
          "shipToAddressLine2": {
            "type": "string"
          },
          "shipToZip": {
            "type": "string"
          },
          "shipToCity": {
            "type": "string"
          },
          "shipToState": {
            "type": "string"
          },
          "shipToCountry": {
            "type": "string",
            "format": "guid"
          },
          "shipToTelephone": {
            "type": "string"
          },
          "billToFirstName": {
            "type": "string"
          },
          "billToLastName": {
            "type": "string"
          },
          "billToAddressLine1": {
            "type": "string"
          },
          "billToAddressLine2": {
            "type": "string"
          },
          "billToZip": {
            "type": "string"
          },
          "billToCity": {
            "type": "string"
          },
          "billToState": {
            "type": "string"
          },
          "billToCountry": {
            "type": "string",
            "format": "guid"
          },
          "billToTelephone": {
            "type": "string"
          },
          "numberOfLines": {
            "type": "integer",
            "format": "int32"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "format": "guid"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "workPhone": {
            "type": "string"
          },
          "cellPhone": {
            "type": "string"
          },
          "homePhone": {
            "type": "string"
          },
          "subTotalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "taxAmount": {
            "type": "number",
            "format": "decimal"
          },
          "discountAmount": {
            "type": "number",
            "format": "decimal"
          },
          "netTotalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "orderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UmbracoOrderLineItemDto"
            }
          }
        }
      },
      "UmbracoOrderLineItemDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "umbracoOrderId": {
            "type": "string",
            "format": "guid"
          },
          "lineItemId": {
            "type": "string",
            "format": "guid"
          },
          "sku": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "decimal"
          },
          "price": {
            "type": "number",
            "format": "decimal"
          },
          "basePrice": {
            "type": "number",
            "format": "decimal"
          },
          "unitPrice": {
            "type": "number",
            "format": "decimal"
          },
          "discount": {
            "type": "number",
            "format": "decimal"
          },
          "tax": {
            "type": "number",
            "format": "decimal"
          },
          "total": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "SearchUmbracoOrdersRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationFilter"
          },
          {
            "type": "object",
            "description": "Searches for umbraco orders based on the provided criteria.",
            "additionalProperties": false
          }
        ]
      },
      "CreateUmbracoOrderRequest": {
        "type": "object",
        "description": "Request to create a new Umbraco order.",
        "additionalProperties": false,
        "required": [
          "orderNumber",
          "orderDate"
        ],
        "properties": {
          "orderNumber": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "shipToMemberId": {
            "type": "string",
            "format": "guid"
          },
          "shipToFirstName": {
            "type": "string"
          },
          "shipToLastName": {
            "type": "string"
          },
          "shipToAddressLine1": {
            "type": "string"
          },
          "shipToAddressLine2": {
            "type": "string"
          },
          "shipToZip": {
            "type": "string"
          },
          "shipToCity": {
            "type": "string"
          },
          "shipToState": {
            "type": "string"
          },
          "shipToCountry": {
            "type": "string",
            "format": "guid"
          },
          "shipToTelephone": {
            "type": "string"
          },
          "billToMemberId": {
            "type": "string",
            "format": "guid"
          },
          "billToFirstName": {
            "type": "string"
          },
          "billToLastName": {
            "type": "string"
          },
          "billToAddressLine1": {
            "type": "string"
          },
          "billToAddressLine2": {
            "type": "string"
          },
          "billToZip": {
            "type": "string"
          },
          "billToCity": {
            "type": "string"
          },
          "billToState": {
            "type": "string"
          },
          "billToCountry": {
            "type": "string",
            "format": "guid"
          },
          "billToTelephone": {
            "type": "string"
          },
          "numberOfLines": {
            "type": "integer",
            "format": "int32"
          },
          "memberId": {
            "type": "string",
            "format": "guid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "guid"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "workPhone": {
            "type": "string"
          },
          "cellPhone": {
            "type": "string"
          },
          "homePhone": {
            "type": "string"
          },
          "subTotalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "taxAmount": {
            "type": "number",
            "format": "decimal"
          },
          "discountAmount": {
            "type": "number",
            "format": "decimal"
          },
          "netTotalAmount": {
            "type": "number",
            "format": "decimal"
          },
          "merchantAuthorizationCode": {
            "type": "string"
          },
          "merchantOrderId": {
            "type": "string"
          },
          "merchantPaymentReference": {
            "type": "string"
          },
          "merchantSchemaReference": {
            "type": "string"
          }
        }
      },
      "UpdateUmbracoOrderRequest": {
        "type": "object",
        "description": "Represents a request to update a UmbracoOrder.",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "orderNumber": {
            "type": "string",
            "nullable": true
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "shipToMemberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "shipToFirstName": {
            "type": "string",
            "nullable": true
          },
          "shipToLastName": {
            "type": "string",
            "nullable": true
          },
          "shipToAddressLine1": {
            "type": "string",
            "nullable": true
          },
          "shipToAddressLine2": {
            "type": "string",
            "nullable": true
          },
          "shipToZip": {
            "type": "string",
            "nullable": true
          },
          "shipToCity": {
            "type": "string",
            "nullable": true
          },
          "shipToState": {
            "type": "string",
            "nullable": true
          },
          "shipToCountry": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "shipToTelephone": {
            "type": "string",
            "nullable": true
          },
          "billToMemberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "billToFirstName": {
            "type": "string",
            "nullable": true
          },
          "billToLastName": {
            "type": "string",
            "nullable": true
          },
          "billToAddressLine1": {
            "type": "string",
            "nullable": true
          },
          "billToAddressLine2": {
            "type": "string",
            "nullable": true
          },
          "billToZip": {
            "type": "string",
            "nullable": true
          },
          "billToCity": {
            "type": "string",
            "nullable": true
          },
          "billToState": {
            "type": "string",
            "nullable": true
          },
          "billToCountry": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "billToTelephone": {
            "type": "string",
            "nullable": true
          },
          "numberOfLines": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true
          },
          "subTotalAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "taxAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "discountAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "netTotalAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "merchantAuthorizationCode": {
            "type": "string",
            "nullable": true
          },
          "merchantOrderId": {
            "type": "string",
            "nullable": true
          },
          "merchantPaymentReference": {
            "type": "string",
            "nullable": true
          },
          "merchantSchemaReference": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExportUmbracoOrdersRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFilter"
          },
          {
            "type": "object",
            "description": "Represents a request to export umbraco orders UmbracoOrder based on filtering criteria.",
            "additionalProperties": false
          }
        ]
      }
    },
    "securitySchemes": {
      "X-API-KEY": {
        "type": "apiKey",
        "description": "X-API-KEY",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  }
}