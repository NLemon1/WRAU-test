@using Umbraco.Commerce.Extensions;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<CheckoutReviewPage>
@{
    Layout = "CheckoutStepPage.cshtml";
}

@* @await Html.PartialAsync("Commerce/OrderInformationSummary") *@

@section aside {
    @Html.Partial("CheckoutSidebar")
}

@using (await Html.BeginPaymentFormAsync(Model.Order)) 
{

    @* checkout summary *@
    <div class="mb-5 px-3 py-1 border rounded">
        <div class="d-flex flex-column flex-sm-row py-2">
            <span style="width: 80px; color: #696f78;">Contact</span>
            <span class="flex-grow-1">@Model.Order.CustomerInfo.Email</span>
            <a class="text-decoration-none" href="#">Change</a>
        </div>
        <div class="d-flex flex-column flex-sm-row py-2 border-top">
            <span style="width: 80px; color: #696f78;">Ship to</span>
            <span class="flex-grow-1">@Model.ReadableShippingAddress</span>
            <a class="text-decoration-none" href="#">Change</a>
        </div>
        <div class="d-flex flex-column flex-sm-row py-2 border-top">
            <span style="width: 80px; color: #696f78;">Shipping method</span>
            <span class="flex-grow-1">@Model.ShippingMethod.Name</span>
            <a class="text-decoration-none" href="#">Change</a>
        </div>
        <div class="d-flex flex-column flex-sm-row py-2 border-top">
            <span style="width: 80px; color: #696f78;">Payment method</span>
            <span class="flex-grow-1">@Model.PaymentMethod.Name</span>
            @* <a class="text-decoration-none" href="#">Change</a> *@
        </div>
    </div>

    <div class="mt-5 p-4" style="border: 1px solid #d7d7dc; border-radius: 0.25rem;">
        <table class="w-100">
            <tr>
                <td class="pb-3">Subtotal</td>
                <td class="pb-3 text-end">@Model.Order.SubtotalPrice.WithoutAdjustments.Formatted().WithoutTax</td>
            </tr>
            <tr>
                <td class="pb-3">Tax</td>
                <td class="pb-3 text-end">@Model.Order.TotalPrice.Value.Formatted().Tax</td>
            </tr>
            @if (@Model.ShippingMethod != null)
            {
                var shippingAmount = @Model.Order.ShippingInfo.TotalPrice.Value;
                <tr>
                    <td class="pb-3">Shipping</td>
                    <td class="pb-3 text-end">@Html.Raw(Convert.ToDouble(shippingAmount.WithTax) > 0.00 ? shippingAmount.Formatted() : "FREE")</td>
                </tr>
            }
            @*{
                var totalDiscount = Model.Order.GetTotalPriceAdjustmentByType<DiscountAdjustment>();
                if (totalDiscount != 0)
                {
                    <tr>
                        <td class="pb-3">Discounts</td>
                        <td class="pb-3 text-end">@(totalDiscount.Formatted().WithoutTax)</td>
                    </tr>
                }
            }*@
            <tr class="fw-bold" style="border-top: 1px solid #d7d7dc;">
                <td class="py-3">Total</td>
                <td class="py-3 text-end">@Model.Order.TotalPrice.Value.Formatted()</td>
            </tr>
        </table>
        <p class="fs-xs" style="color: #696f78;">*Disclaimers and fine print here about purchases, returns, exchanges, and cancellations.</p>
    </div>

    @await Html.PartialAsync("CheckoutPrevNext")
}