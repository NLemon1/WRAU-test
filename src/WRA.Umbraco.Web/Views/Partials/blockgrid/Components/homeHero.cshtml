@using Umbraco.Extensions
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using Umbraco.Cms.Core.Models.Blocks
@using ContentModels = WRA.Umbraco.Models;

@{
    var content = (ContentModels.HomeHero)Model.Content;

    string className = "block-home-hero";
    string style = string.Empty;
    string props = string.Empty;

    if (content.Overlay)
    {
        className += " is-style-overlay";
    }

    if (content.HasValue("additionalCssClasses"))
    {
        className += $" {content.AdditionalCssClasses}";
    }

    if (!String.IsNullOrEmpty(className))
    {
        props += $"class=\"{className.Trim()}\"";
    }

    if (!String.IsNullOrEmpty(style))
    {
        props += $" style=\"{style}\"";
    }
    
}

<div @Html.Raw(props.Trim())>
        
    <div class="block-home-hero__media">
        @if (content.HasValue("videoMobile") || content.HasValue("videoDesktop"))
        {
            var videoMobile = content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("videoMobile");
            var videoDesktop = content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("videoDesktop");
            var imageDesktop = content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("imageDesktop");

            <video webkit-playsinline="" playsinline="" autoplay="" loop="" muted="" class="block-home-hero__media__video" poster="@imageDesktop.MediaUrl()">
                <source src="@videoMobile.MediaUrl()" type="video/mp4" media="screen and (max-device-width:767px)">
                <source src="@videoDesktop.MediaUrl()" type="video/mp4" media="screen and (min-device-width:768px)">
            </video>
        } 
        else
        {
            var imageDesktop = content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("imageDesktop");
            var imageMobile = content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("imageMobile");

            <img src="@imageDesktop.GetCropUrl(width: 1920, height: 600, furtherOptions:"&format=WebP")" width="1920" height="600" class="block-home-hero__media__img d-none d-lg-block" alt="@imageDesktop.Value("altText")" />
            <img src="@imageMobile.GetCropUrl(width: 540, height: 540, furtherOptions:"&format=WebP")" width="540" height="540" srcset="@imageMobile.GetCropUrl(width: 1080, height: 1080, furtherOptions:"&format=WebP") 2x" class="block-home-hero__media__img d-lg-none" alt="@imageMobile.Value("altText")" />
        }
    </div>

    @if (!String.IsNullOrEmpty(content.Overline) || !String.IsNullOrEmpty(content.Headline))
    {
        <div class="block-home-hero__content d-flex align-items-center">
            <div class="container">
                <div class="block-home-hero__content-inner-container">
                    @if (!String.IsNullOrEmpty(content.Overline))
                    {
                        <p class="overline-alt fs-sm fs-lg-md">@content.Overline</p>
                    }
                    @if (!String.IsNullOrEmpty(content.Headline))
                    {
                        <h1 class="display-1">@Html.Raw(content.Headline)</h1>
                    }
                </div>
            </div>
        </div>
    }
    
    <div class="block-home-hero__events d-flex flex-column align-items-start p-0 px-lg-5 py-lg-5 pt-lg-6 g-4 mt-auto mt-lg-0">
        <h2 class="js-calendar-tab mobile-calendar-tab h4 mb-0 mb-lg-4 p-4 p-lg-0" role="button" aria-hidden="true">Upcoming Events</h2>
        <div class="block-home-hero__events-inner d-none d-lg-flex flex-column align-items-start w-100 mt-auto">
            @{
                await Html.RenderPartialAsync("_MiniCalendar");
            }            
            <a href="/events" class="btn btn-link-arrow btn-light ms-n2 mt-auto">
                More Events
                <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.820801 8L12.0314 8" stroke="#050F1E" stroke-width="1.37143" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M8.51733 4L12.5173 8L8.51733 12" stroke="#050F1E" stroke-width="1.37143" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </a>
        </div>

    </div>
</div>

<div class="js-calendar-panel block-home-hero__events-mobile d-flex d-lg-none w-100 text-white">
    <div class="flex-column align-items-start  p-4 pb-5 pt-0">
        @{
            await Html.RenderPartialAsync("_MiniCalendar");
        }
        <a href="/events" class="btn btn-link-arrow btn-light ms-n2 mt-auto">
            More Events
            <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.820801 8L12.0314 8" stroke="#050F1E" stroke-width="1.37143" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M8.51733 4L12.5173 8L8.51733 12" stroke="#050F1E" stroke-width="1.37143" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </a>
    </div>
</div>

